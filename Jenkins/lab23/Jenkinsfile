pipeline {
    agent any

    environment {
        DOCKER_HUB_REPO = "abdallah1312/ivolve"
        KUBERNETES_DEPLOYMENT_FILE = "deployment.yaml"
        DOCKER_CREDENTIALS = "Docker-cred"
        DOCKER_IMAGE_NAME ="ivolve"
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()  // Cleans the workspace
            }
        }
        stage('Checkout Code') {
            steps {
                echo 'Checking out code...'
                
                git branch: 'main', url: 'https://github.com/AbdallahHesham44/Ivolve_Training.git'
                
            }
        }

          stage('Build Docker Image') {
            steps {
                sh """
                    cleanWs()
                    pwd
                    cd Jenkins/lab23
                    docker build -t docker.io/abdallah1312/ivolve:${env.BUILD_NUMBER} .
                """
            }
        }

        stage('Push to Docker Hub') {
            steps {
                withDockerRegistry([credentialsId: 'Docker-cred', url: '']) {
                    sh """
                        docker push docker.io/abdallah1312/ivolve:${env.BUILD_NUMBER}
                        
                       
                    """
                }
            }
        }

        stage('Update Deployment YAML') {
            steps {
               script {
                    sh '''
                        pwd
                        cd Jenkins/lab23
                        echo "Current directory: $(pwd)"
                        echo "Directory contents: $(ls -l)"
                        
                        if [ -f deployment.yaml ]; then
                            echo "Found deployment.yaml, modifying it."
                           
                             sed -i 's|image: .*|image: abdallah1312/ivolve:54|' Jenkins/lab23/deployment.yaml
                        else
                            echo "deployment.yaml not found!"
                        fi
                    '''
                }

            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    sh "kubectl apply --dry-run=client -f ${KUBERNETES_DEPLOYMENT_FILE}"
                    sh "kubectl apply -f ${KUBERNETES_DEPLOYMENT_FILE}"
                    sh "kubectl rollout status deployment/<deployment-name>"
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed! Check logs for details.'
        }
        always {
            echo "Cleaning up resources..."
            sh "docker rmi ${DOCKER_HUB_REPO}:${env.BUILD_NUMBER} || true"
        }
    }
}
