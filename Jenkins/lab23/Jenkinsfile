pipeline {
    agent any

    environment {
        DOCKER_HUB_REPO = "docker.io/abdallah1312/ivolve"
        KUBERNETES_DEPLOYMENT_FILE = "deployment.yaml"
        DOCKER_CREDENTIALS = "Docker-cred"
        DOCKER_IMAGE_NAME = "ivolve"
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs() // Cleans the workspace
            }
        }
        stage('Checkout Code') {
            steps {
                echo 'Checking out code...'
                git branch: 'main', url: 'https://github.com/AbdallahHesham44/Ivolve_Training.git'
            }
        }
        stage('Build Docker Image') {
            steps {
                sh """
                    pwd
                    cd Jenkins/lab23
                    docker build -t ${DOCKER_HUB_REPO}:${env.BUILD_NUMBER} .
                """
            }
        }
        stage('Push to Docker Hub') {
            steps {
                withDockerRegistry([credentialsId: DOCKER_CREDENTIALS, url: '']) {
                    sh """
                        docker push ${DOCKER_HUB_REPO}:${env.BUILD_NUMBER}
                    """
                }
            }
        }
        stage('Update Deployment YAML') {
            steps {
                script {
                    sh """
                        pwd
                        cd Jenkins/lab23
                        if [ -f ${KUBERNETES_DEPLOYMENT_FILE} ]; then
                            echo "Found ${KUBERNETES_DEPLOYMENT_FILE}, modifying it."
                            sed -i 's|image: .*|image: ${DOCKER_HUB_REPO}:${env.BUILD_NUMBER}|' ${KUBERNETES_DEPLOYMENT_FILE}
                        else
                            echo "${KUBERNETES_DEPLOYMENT_FILE} not found!"
                        fi
                    """
                }
            }
        }
        stage('Deploy to Kubernetes') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'kubernetes-token', variable: 'K8S_TOKEN')]) {
                        withEnv(["KUBECONFIG = /var/lib/jenkins/.minikube/config"]) {
                            sh """
                                kubectl config set-credentials jenkins-user --token=${K8S_TOKEN}
                                kubectl config set-context jenkins-context --cluster=minikube --user=jenkins-user
                                kubectl config use-context jenkins-context
                                cd Jenkins/lab23
                                kubectl apply -f ${KUBERNETES_DEPLOYMENT_FILE}
                            """
                        }
                    }
                }
            }
        }
    }
    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed! Check logs for details.'
        }
        always {
            echo "Cleaning up resources..."
            sh "docker rmi ${DOCKER_HUB_REPO}:${env.BUILD_NUMBER} || true"
        }
    }
}
