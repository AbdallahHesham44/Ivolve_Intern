pipeline {
    agent any


    environment {
        DOCKER_HUB_REPO = "docker.io/abdallah1312/ivolve"
        KUBERNETES_DEPLOYMENT_FILE = "deployment.yaml"
        DOCKER_CREDENTIALS = "Docker-cred"
        DOCKER_IMAGE_NAME = "ivolve"
        
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()  // Cleans the workspace
            }
        }
        stage('Checkout Code') {
            steps {
                echo 'Checking out code...'
                
                git branch: 'main', url: 'https://github.com/AbdallahHesham44/Ivolve_Training.git'
                
            }
        }

          stage('Build Docker Image') {
            steps {
                sh """
                    
                    pwd
                    cd Jenkins/lab23
                    docker build -t docker.io/abdallah1312/ivolve:${env.BUILD_NUMBER} .
                """
            }
        }

        stage('Push to Docker Hub') {
            steps {
                withDockerRegistry([credentialsId: 'Docker-cred', url: '']) {
                    sh """
                        docker push ${DOCKER_HUB_REPO}:${env.BUILD_NUMBER}

                        
                       
                    """
                }
            }
        }

    stage('Update Deployment YAML') {
        steps {
            script {
            sh """
                # Print current directory and its contents for debugging
                pwd
                cd Jenkins/lab23
               
                
                # Check if the deployment.yaml file exists
                if [ -f deployment.yaml ]; then
                    echo "Found deployment.yaml, modifying it."
                    
                    # Dynamically update the image tag using the BUILD_NUMBER
                    sed -i 's|image: .*|image: abdallah1312/ivolve:${BUILD_NUMBER}|' deployment.yaml
                else
                    echo "deployment.yaml not found!"
                fi
            """
        }
    }
}
 stage('Prepare Kubeconfig') {
            steps {
                withCredentials(credentialsId: 'kubernetes-token', variable: 'K8S_TOKEN') {
                    script {
                        // Create Kubeconfig file dynamically using the certificates
                        sh """
                            mkdir -p ~/.minikube
                            echo "apiVersion: v1
                            kind: Config
                            clusters:
                            - cluster:
                                certificate-authority-data: \$(cat $CA_CERT | base64 | tr -d '\n')
                                server: https://127.0.0.1:8443
                              name: minikube
                            users:
                            - name: minikube
                              user:
                                client-certificate-data: \$(cat $CLIENT_CERT | base64 | tr -d '\n')
                                client-key-data: \$(cat $CLIENT_KEY | base64 | tr -d '\n')
                            contexts:
                            - context:
                                cluster: minikube
                                user: minikube
                              name: minikube
                            current-context: minikube" > ~/.kube/config
                        """
                    }
                }
            }

 stage('Deploy to Kubernetes') {
    steps {
        script {

             withCredentials([string(credentialsId: 'kubernetes-token', variable: 'K8S_TOKEN')]) {
                   withEnv(["KUBECONFIG=$HOME/.kube/config"]) {
            sh """
                kubectl config set-credentials jenkins-user --token=${K8S_TOKEN}
                kubectl config set-context jenkins-context --cluster=minikube --user=jenkins-user
                kubectl config use-context jenkins-context
             # Navigate to the directory containing the deployment YAML
                cd Jenkins/lab23
            
                kubectl apply -f ${KUBERNETES_DEPLOYMENT_FILE}
            """
            
        }
             }
    }
    }
}
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed! Check logs for details.'
        }
        always {
            echo "Cleaning up resources..."
            sh "docker rmi ${DOCKER_HUB_REPO}:${env.BUILD_NUMBER} || true"
        }
    }
}
